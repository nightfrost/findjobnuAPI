// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using findjobnuAPI.Repositories.Context;

#nullable disable

namespace findjobnuAPI.Migrations
{
    [DbContext(typeof(FindjobnuContext))]
    partial class FindjobnuContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("findjobnuAPI.Models.Accomplishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkedInProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedInProfileId");

                    b.ToTable("Accomplishments");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("findjobnuAPI.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LinkedInProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedInProfileId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkedInProfileId")
                        .HasColumnType("int");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedInProfileId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkedInProfileId")
                        .HasColumnType("int");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedInProfileId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LinkedInProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedInProfileId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("findjobnuAPI.Models.JobIndexPosts", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<byte[]>("BannerPicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FooterPicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.HasKey("JobID");

                    b.HasIndex("JobUrl")
                        .IsUnique()
                        .HasFilter("[JobUrl] IS NOT NULL");

                    b.ToTable("JobIndexPostingsExtended", (string)null);
                });

            modelBuilder.Entity("findjobnuAPI.Models.LinkedInProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("LinkedInProfiles");
                });

            modelBuilder.Entity("findjobnuAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SavedJobPosts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Accomplishment", b =>
                {
                    b.HasOne("findjobnuAPI.Models.LinkedInProfile", "LinkedInProfile")
                        .WithMany("Accomplishments")
                        .HasForeignKey("LinkedInProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedInProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Contact", b =>
                {
                    b.HasOne("findjobnuAPI.Models.LinkedInProfile", "LinkedInProfile")
                        .WithMany("Contacts")
                        .HasForeignKey("LinkedInProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedInProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Education", b =>
                {
                    b.HasOne("findjobnuAPI.Models.LinkedInProfile", "LinkedInProfile")
                        .WithMany("Educations")
                        .HasForeignKey("LinkedInProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedInProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Experience", b =>
                {
                    b.HasOne("findjobnuAPI.Models.LinkedInProfile", "LinkedInProfile")
                        .WithMany("Experiences")
                        .HasForeignKey("LinkedInProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedInProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.Interest", b =>
                {
                    b.HasOne("findjobnuAPI.Models.LinkedInProfile", "LinkedInProfile")
                        .WithMany("Interests")
                        .HasForeignKey("LinkedInProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedInProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.LinkedInProfile", b =>
                {
                    b.HasOne("findjobnuAPI.Models.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("findjobnuAPI.Models.LinkedInProfile", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("findjobnuAPI.Models.BasicInfo", "BasicInfo", b1 =>
                        {
                            b1.Property<int>("LinkedInProfileId")
                                .HasColumnType("int");

                            b1.Property<string>("About")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Company")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("JobTitle")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LinkedinUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Location")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("OpenToWork")
                                .HasColumnType("bit");

                            b1.HasKey("LinkedInProfileId");

                            b1.ToTable("LinkedInProfiles");

                            b1.WithOwner()
                                .HasForeignKey("LinkedInProfileId");
                        });

                    b.Navigation("BasicInfo");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("findjobnuAPI.Models.LinkedInProfile", b =>
                {
                    b.Navigation("Accomplishments");

                    b.Navigation("Contacts");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Interests");
                });
#pragma warning restore 612, 618
        }
    }
}
